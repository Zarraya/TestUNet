/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public partial class FrameworkElement : UIElement {
  internal new static FrameworkElement CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new FrameworkElement(cPtr, cMemoryOwn);
  }

  internal FrameworkElement(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(FrameworkElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events
  #region ContextMenuClosing
  public delegate void ContextMenuClosingHandler(object sender, ContextMenuEventArgs e);
  public event ContextMenuClosingHandler ContextMenuClosing {
    add {
      if (!_ContextMenuClosing.ContainsKey(swigCPtr.Handle)) {
        _ContextMenuClosing.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ContextMenuClosing(_raiseContextMenuClosing, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ContextMenuClosing[swigCPtr.Handle] += value;
    }
    remove {
      if (_ContextMenuClosing.ContainsKey(swigCPtr.Handle)) {

        _ContextMenuClosing[swigCPtr.Handle] -= value;

        if (_ContextMenuClosing[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ContextMenuClosing(_raiseContextMenuClosing, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ContextMenuClosing.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseContextMenuClosingCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseContextMenuClosingCallback _raiseContextMenuClosing = RaiseContextMenuClosing;

  [MonoPInvokeCallback(typeof(RaiseContextMenuClosingCallback))]
  private static void RaiseContextMenuClosing(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_ContextMenuClosing.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for ContextMenuClosing event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _ContextMenuClosing.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        ContextMenuClosingHandler handler = _ContextMenuClosing[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new ContextMenuEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuClosingHandler> _ContextMenuClosing =
      new System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuClosingHandler>();
  #endregion

  #region ContextMenuOpening
  public delegate void ContextMenuOpeningHandler(object sender, ContextMenuEventArgs e);
  public event ContextMenuOpeningHandler ContextMenuOpening {
    add {
      if (!_ContextMenuOpening.ContainsKey(swigCPtr.Handle)) {
        _ContextMenuOpening.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ContextMenuOpening(_raiseContextMenuOpening, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ContextMenuOpening[swigCPtr.Handle] += value;
    }
    remove {
      if (_ContextMenuOpening.ContainsKey(swigCPtr.Handle)) {

        _ContextMenuOpening[swigCPtr.Handle] -= value;

        if (_ContextMenuOpening[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ContextMenuOpening(_raiseContextMenuOpening, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ContextMenuOpening.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseContextMenuOpeningCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseContextMenuOpeningCallback _raiseContextMenuOpening = RaiseContextMenuOpening;

  [MonoPInvokeCallback(typeof(RaiseContextMenuOpeningCallback))]
  private static void RaiseContextMenuOpening(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_ContextMenuOpening.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for ContextMenuOpening event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _ContextMenuOpening.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        ContextMenuOpeningHandler handler = _ContextMenuOpening[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new ContextMenuEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuOpeningHandler> _ContextMenuOpening =
      new System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuOpeningHandler>();
  #endregion

  #region Loaded
  public delegate void LoadedHandler(object sender, RoutedEventArgs e);
  public event LoadedHandler Loaded {
    add {
      if (!_Loaded.ContainsKey(swigCPtr.Handle)) {
        _Loaded.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_Loaded(_raiseLoaded, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Loaded[swigCPtr.Handle] += value;
    }
    remove {
      if (_Loaded.ContainsKey(swigCPtr.Handle)) {

        _Loaded[swigCPtr.Handle] -= value;

        if (_Loaded[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_Loaded(_raiseLoaded, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Loaded.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseLoadedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseLoadedCallback _raiseLoaded = RaiseLoaded;

  [MonoPInvokeCallback(typeof(RaiseLoadedCallback))]
  private static void RaiseLoaded(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_Loaded.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for Loaded event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _Loaded.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        LoadedHandler handler = _Loaded[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LoadedHandler> _Loaded =
      new System.Collections.Generic.Dictionary<System.IntPtr, LoadedHandler>();
  #endregion

  #region SizeChanged
  public delegate void SizeChangedHandler(object sender, SizeChangedEventArgs e);
  public event SizeChangedHandler SizeChanged {
    add {
      if (!_SizeChanged.ContainsKey(swigCPtr.Handle)) {
        _SizeChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_SizeChanged(_raiseSizeChanged, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _SizeChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_SizeChanged.ContainsKey(swigCPtr.Handle)) {

        _SizeChanged[swigCPtr.Handle] -= value;

        if (_SizeChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_SizeChanged(_raiseSizeChanged, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _SizeChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseSizeChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseSizeChangedCallback _raiseSizeChanged = RaiseSizeChanged;

  [MonoPInvokeCallback(typeof(RaiseSizeChangedCallback))]
  private static void RaiseSizeChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_SizeChanged.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for SizeChanged event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _SizeChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        SizeChangedHandler handler = _SizeChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new SizeChangedEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SizeChangedHandler> _SizeChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, SizeChangedHandler>();
  #endregion

  #region ToolTipClosing
  public delegate void ToolTipClosingHandler(object sender, ToolTipEventArgs e);
  public event ToolTipClosingHandler ToolTipClosing {
    add {
      if (!_ToolTipClosing.ContainsKey(swigCPtr.Handle)) {
        _ToolTipClosing.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ToolTipClosing(_raiseToolTipClosing, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ToolTipClosing[swigCPtr.Handle] += value;
    }
    remove {
      if (_ToolTipClosing.ContainsKey(swigCPtr.Handle)) {

        _ToolTipClosing[swigCPtr.Handle] -= value;

        if (_ToolTipClosing[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ToolTipClosing(_raiseToolTipClosing, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ToolTipClosing.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseToolTipClosingCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseToolTipClosingCallback _raiseToolTipClosing = RaiseToolTipClosing;

  [MonoPInvokeCallback(typeof(RaiseToolTipClosingCallback))]
  private static void RaiseToolTipClosing(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_ToolTipClosing.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for ToolTipClosing event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _ToolTipClosing.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        ToolTipClosingHandler handler = _ToolTipClosing[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new ToolTipEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ToolTipClosingHandler> _ToolTipClosing =
      new System.Collections.Generic.Dictionary<System.IntPtr, ToolTipClosingHandler>();
  #endregion

  #region ToolTipOpening
  public delegate void ToolTipOpeningHandler(object sender, ToolTipEventArgs e);
  public event ToolTipOpeningHandler ToolTipOpening {
    add {
      if (!_ToolTipOpening.ContainsKey(swigCPtr.Handle)) {
        _ToolTipOpening.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ToolTipOpening(_raiseToolTipOpening, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ToolTipOpening[swigCPtr.Handle] += value;
    }
    remove {
      if (_ToolTipOpening.ContainsKey(swigCPtr.Handle)) {

        _ToolTipOpening[swigCPtr.Handle] -= value;

        if (_ToolTipOpening[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ToolTipOpening(_raiseToolTipOpening, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ToolTipOpening.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseToolTipOpeningCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseToolTipOpeningCallback _raiseToolTipOpening = RaiseToolTipOpening;

  [MonoPInvokeCallback(typeof(RaiseToolTipOpeningCallback))]
  private static void RaiseToolTipOpening(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_ToolTipOpening.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for ToolTipOpening event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _ToolTipOpening.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        ToolTipOpeningHandler handler = _ToolTipOpening[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new ToolTipEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ToolTipOpeningHandler> _ToolTipOpening =
      new System.Collections.Generic.Dictionary<System.IntPtr, ToolTipOpeningHandler>();
  #endregion

  #region Unloaded
  public delegate void UnloadedHandler(object sender, RoutedEventArgs e);
  public event UnloadedHandler Unloaded {
    add {
      if (!_Unloaded.ContainsKey(swigCPtr.Handle)) {
        _Unloaded.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_Unloaded(_raiseUnloaded, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Unloaded[swigCPtr.Handle] += value;
    }
    remove {
      if (_Unloaded.ContainsKey(swigCPtr.Handle)) {

        _Unloaded[swigCPtr.Handle] -= value;

        if (_Unloaded[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_Unloaded(_raiseUnloaded, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Unloaded.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseUnloadedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseUnloadedCallback _raiseUnloaded = RaiseUnloaded;

  [MonoPInvokeCallback(typeof(RaiseUnloadedCallback))]
  private static void RaiseUnloaded(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_Unloaded.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for Unloaded event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _Unloaded.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        UnloadedHandler handler = _Unloaded[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new RoutedEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, UnloadedHandler> _Unloaded =
      new System.Collections.Generic.Dictionary<System.IntPtr, UnloadedHandler>();
  #endregion

  #region DataContextChanged
  public delegate void DataContextChangedHandler(object sender, DependencyPropertyChangedEventArgs e);
  public event DataContextChangedHandler DataContextChanged {
    add {
      if (!_DataContextChanged.ContainsKey(swigCPtr.Handle)) {
        _DataContextChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_DataContextChanged(_raiseDataContextChanged, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _DataContextChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (_DataContextChanged.ContainsKey(swigCPtr.Handle)) {

        _DataContextChanged[swigCPtr.Handle] -= value;

        if (_DataContextChanged[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_DataContextChanged(_raiseDataContextChanged, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DataContextChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseDataContextChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseDataContextChangedCallback _raiseDataContextChanged = RaiseDataContextChanged;

  [MonoPInvokeCallback(typeof(RaiseDataContextChangedCallback))]
  private static void RaiseDataContextChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_DataContextChanged.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for DataContextChanged event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _DataContextChanged.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        DataContextChangedHandler handler = _DataContextChanged[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new DependencyPropertyChangedEventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DataContextChangedHandler> _DataContextChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, DataContextChangedHandler>();
  #endregion

  #region Initialized
  public delegate void InitializedHandler(object sender, EventArgs e);
  public event InitializedHandler Initialized {
    add {
      if (!_Initialized.ContainsKey(swigCPtr.Handle)) {
        _Initialized.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_FrameworkElement_Initialized(_raiseInitialized, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Initialized[swigCPtr.Handle] += value;
    }
    remove {
      if (_Initialized.ContainsKey(swigCPtr.Handle)) {

        _Initialized[swigCPtr.Handle] -= value;

        if (_Initialized[swigCPtr.Handle] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_Initialized(_raiseInitialized, swigCPtr.Handle);
          #if UNITY_EDITOR || NOESIS_API
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Initialized.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  internal delegate void RaiseInitializedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseInitializedCallback _raiseInitialized = RaiseInitialized;

  [MonoPInvokeCallback(typeof(RaiseInitializedCallback))]
  private static void RaiseInitialized(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (!_Initialized.ContainsKey(cPtr)) {
        throw new System.InvalidOperationException("Delegate not registered for Initialized event");
      }
      if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
        _Initialized.Remove(cPtr);
        return;
      }
      if (Noesis.Extend.Initialized) {
        InitializedHandler handler = _Initialized[cPtr];
        if (handler != null) {
          handler(Noesis.Extend.GetProxy(sender, false), new EventArgs(e, false));
        }
      }
    }
    catch (System.Exception exception) {
      Noesis.Error.SetNativePendingError(exception);
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, InitializedHandler> _Initialized =
      new System.Collections.Generic.Dictionary<System.IntPtr, InitializedHandler>();
  #endregion

  #endregion

  public FrameworkElement() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(FrameworkElement).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_FrameworkElement();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public BaseExpression GetBindingExpression(DependencyProperty dp) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetBindingExpression(swigCPtr, DependencyProperty.getCPtr(dp));
    BaseExpression ret = (cPtr == IntPtr.Zero) ? null : new BaseExpression(cPtr, false);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public BaseExpression SetBinding(DependencyProperty dp, BindingBase binding) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_SetBinding__SWIG_0(swigCPtr, DependencyProperty.getCPtr(dp), BindingBase.getCPtr(binding));
    BaseExpression ret = (cPtr == IntPtr.Zero) ? null : new BaseExpression(cPtr, false);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public BaseExpression SetBinding(DependencyProperty dp, string path) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_SetBinding__SWIG_1(swigCPtr, DependencyProperty.getCPtr(dp), path != null ? path : string.Empty);
    BaseExpression ret = (cPtr == IntPtr.Zero) ? null : new BaseExpression(cPtr, false);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void BringIntoView() {
    NoesisGUI_PINVOKE.FrameworkElement_BringIntoView__SWIG_0(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void BringIntoView(Rect targetRectangle) {
    NoesisGUI_PINVOKE.FrameworkElement_BringIntoView__SWIG_1(swigCPtr, ref targetRectangle);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public object GetTemplateChild(string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetTemplateChild(swigCPtr, name != null ? name : string.Empty);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  public object FindName(string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_FindName(swigCPtr, name != null ? name : string.Empty);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  public void RegisterName(string name, object arg1) {
    NoesisGUI_PINVOKE.FrameworkElement_RegisterName(swigCPtr, name != null ? name : string.Empty, Noesis.Extend.GetInstanceHandle(arg1));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UnregisterName(string name) {
    NoesisGUI_PINVOKE.FrameworkElement_UnregisterName(swigCPtr, name != null ? name : string.Empty);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UpdateName(string name, object arg1) {
    NoesisGUI_PINVOKE.FrameworkElement_UpdateName(swigCPtr, name != null ? name : string.Empty, Noesis.Extend.GetInstanceHandle(arg1));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public override sealed bool MoveFocus(TraversalRequest request) {
    bool ret = NoesisGUI_PINVOKE.FrameworkElement_MoveFocus(swigCPtr, TraversalRequest.getCPtr(request));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public override sealed DependencyObject PredictFocus(FocusNavigationDirection direction) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_PredictFocus(swigCPtr, (int)direction);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static DependencyProperty ActualHeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ActualHeightProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ActualWidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ActualWidthProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ContextMenuProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ContextMenuProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty DataContextProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_DataContextProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty DefaultStyleKeyProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_DefaultStyleKeyProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FocusVisualStyleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_FocusVisualStyleProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_HeightProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HorizontalAlignmentProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_HorizontalAlignmentProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty LayoutTransformProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_LayoutTransformProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MarginProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MarginProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MaxHeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MaxHeightProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MaxWidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MaxWidthProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MinHeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MinHeightProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty MinWidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MinWidthProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty NameProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_NameProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty OverridesDefaultStyleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_OverridesDefaultStyleProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty StyleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_StyleProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty TagProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_TagProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ToolTipProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ToolTipProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty UseLayoutRoundingProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_UseLayoutRoundingProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VerticalAlignmentProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_VerticalAlignmentProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty WidthProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_WidthProperty_get();
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float ActualHeight {
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_ActualHeight_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float ActualWidth {
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_ActualWidth_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public ContextMenu ContextMenu {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ContextMenu_set(swigCPtr, ContextMenu.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ContextMenu_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (ContextMenu)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object DataContext {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_DataContext_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_DataContext_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public System.Type DefaultStyleKey {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_DefaultStyleKey_set(swigCPtr, new HandleRef(value, (value != null ? Noesis.Extend.GetNativeType(value) : IntPtr.Zero)));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_DefaultStyleKey_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (cPtr != IntPtr.Zero) {
        Noesis.Extend.NativeTypeInfo info = Noesis.Extend.GetNativeTypeInfo(cPtr);
        return info.Type;
      }
      return null;
    }
  }

  public Style FocusVisualStyle {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_FocusVisualStyle_set(swigCPtr, Style.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_FocusVisualStyle_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (Style)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float Height {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Height_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_Height_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public HorizontalAlignment HorizontalAlignment {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_HorizontalAlignment_set(swigCPtr, (int)value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      HorizontalAlignment ret = (HorizontalAlignment)NoesisGUI_PINVOKE.FrameworkElement_HorizontalAlignment_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsInitialized {
    get {
      bool ret = NoesisGUI_PINVOKE.FrameworkElement_IsInitialized_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsLoaded {
    get {
      bool ret = NoesisGUI_PINVOKE.FrameworkElement_IsLoaded_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public Transform LayoutTransform {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_LayoutTransform_set(swigCPtr, Transform.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_LayoutTransform_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (Transform)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Thickness Margin {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Margin_set(swigCPtr, ref value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.FrameworkElement_Margin_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Thickness>(ret);
      }
      else {
        return new Thickness();
      }
    }

  }

  public float MaxHeight {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MaxHeight_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_MaxHeight_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float MaxWidth {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MaxWidth_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_MaxWidth_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float MinHeight {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MinHeight_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_MinHeight_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float MinWidth {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MinWidth_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_MinWidth_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public string Name {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Name_set(swigCPtr, value != null ? value : string.Empty);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.FrameworkElement_Name_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public bool OverridesDefaultStyle {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_OverridesDefaultStyle_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.FrameworkElement_OverridesDefaultStyle_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public Style Style {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Style_set(swigCPtr, Style.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_Style_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (Style)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object Tag {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Tag_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_Tag_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object ToolTip {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ToolTip_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ToolTip_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool UseLayoutRounding {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_UseLayoutRounding_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.FrameworkElement_UseLayoutRounding_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public VerticalAlignment VerticalAlignment {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_VerticalAlignment_set(swigCPtr, (int)value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      VerticalAlignment ret = (VerticalAlignment)NoesisGUI_PINVOKE.FrameworkElement_VerticalAlignment_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float Width {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Width_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.FrameworkElement_Width_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public TriggerCollection Triggers {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_Triggers_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (TriggerCollection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public FrameworkElement Parent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_Parent_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (FrameworkElement)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public FrameworkElement TemplatedParent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_TemplatedParent_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (FrameworkElement)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public ResourceDictionary Resources {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_Resources_set(swigCPtr, ResourceDictionary.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_Resources_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (ResourceDictionary)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.FrameworkElement_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }


  internal new static IntPtr Extend(string typeName) {
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_FrameworkElement(Marshal.StringToHGlobalAnsi(typeName));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return nativeType;
  }
}

}

