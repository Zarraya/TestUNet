/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ItemCollection : BaseComponent {
  internal new static ItemCollection CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ItemCollection(cPtr, cMemoryOwn);
  }

  internal ItemCollection(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ItemCollection obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  private struct CollectionEnumerator :  System.Collections.IEnumerator {
    object System.Collections.IEnumerator.Current {
      get { return Current; }
    }
    public object Current {
      get { return this._collection[(uint)this._index]; }
    }
    public bool MoveNext() {
      if (++this._index >= (int)this._collection.Count) {
        return false;
      }
      return true;
    }
    public void Reset() {
      this._index = -1;
    }
    public CollectionEnumerator(ItemCollection c) {
      this._collection = c;
      this._index = -1;
    }
    private ItemCollection _collection;
    private int _index;
  }

  public System.Collections.IEnumerator GetEnumerator() {
    return new CollectionEnumerator(this);
  }

  public object this[uint index] {
    get {
      if (index >= Count) {
        throw new ArgumentOutOfRangeException("index");
      }
      return Get(index);
    }
    set {
      if (index >= Count) {
        throw new ArgumentOutOfRangeException("index");
      }
      Set(index, value);
    }
  }

  public ItemCollection() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type, out bool registerExtend) {
    registerExtend = false;
    return NoesisGUI_PINVOKE.new_ItemCollection__SWIG_0();
  }

  public ItemCollection(ItemsControl itemsControl) : this(NoesisGUI_PINVOKE.new_ItemCollection__SWIG_1(ItemsControl.getCPtr(itemsControl)), true) {
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool Contains(object item) {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_Contains(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentTo(object item) {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentTo(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToFirst() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToFirst(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToLast() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToLast(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToNext() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToNext(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToPosition(int position) {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToPosition(swigCPtr, position);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToPrevious() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToPrevious(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Refresh() {
    NoesisGUI_PINVOKE.ItemCollection_Refresh(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public object Get(uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemCollection_Get(swigCPtr, index);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  public void Set(uint index, object item) {
    NoesisGUI_PINVOKE.ItemCollection_Set(swigCPtr, index, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public uint Add(object item) {
    uint ret = NoesisGUI_PINVOKE.ItemCollection_Add(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Clear() {
    NoesisGUI_PINVOKE.ItemCollection_Clear(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public int IndexOf(object item) {
    int ret = NoesisGUI_PINVOKE.ItemCollection_IndexOf(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Insert(uint index, object item) {
    NoesisGUI_PINVOKE.ItemCollection_Insert(swigCPtr, index, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Remove(object item) {
    NoesisGUI_PINVOKE.ItemCollection_Remove(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void RemoveAt(uint index) {
    NoesisGUI_PINVOKE.ItemCollection_RemoveAt(swigCPtr, index);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool CanFilter {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemCollection_CanFilter_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool CanGroup {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemCollection_CanGroup_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool CanSort {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemCollection_CanSort_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public object CurrentItem {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemCollection_CurrentItem_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public int CurrentPosition {
    get {
      int ret = NoesisGUI_PINVOKE.ItemCollection_CurrentPosition_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsCurrentAfterLast {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemCollection_IsCurrentAfterLast_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsCurrentBeforeFirst {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemCollection_IsCurrentBeforeFirst_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsEmpty {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemCollection_IsEmpty_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public uint Count {
    get {
      uint ret = NoesisGUI_PINVOKE.ItemCollection_Count_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ItemCollection_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

