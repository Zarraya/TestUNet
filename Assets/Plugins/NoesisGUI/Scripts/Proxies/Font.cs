/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Font : BaseComponent {
  internal new static Font CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Font(cPtr, cMemoryOwn);
  }

  internal Font(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Font obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Font() {
  }

  public Font(FontFamily family, FontStyle style, FontWeight weight, float size, float stroke) : this(NoesisGUI_PINVOKE.new_Font(FontFamily.getCPtr(family), (int)style, (int)weight, size, stroke), true) {
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Size GetBounds(string text, TextAlignment alignment, TextWrapping wrapping, TextTrimming trimming, float maxWidth, float maxHeight, float lineHeight) {
    IntPtr ret = NoesisGUI_PINVOKE.Font_GetBounds(swigCPtr, text != null ? text : string.Empty, (int)alignment, (int)wrapping, (int)trimming, maxWidth, maxHeight, lineHeight);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Size>(ret);
    }
    else {
      return new Size();
    }
  }

  public float GetGlyphAdvance(uint ch) {
    float ret = NoesisGUI_PINVOKE.Font_GetGlyphAdvance(swigCPtr, ch);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public FontFamily Family {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Font_Family_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return (FontFamily)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public FontStyle Style {
    get {
      FontStyle ret = (FontStyle)NoesisGUI_PINVOKE.Font_Style_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public FontWeight Weight {
    get {
      FontWeight ret = (FontWeight)NoesisGUI_PINVOKE.Font_Weight_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float Stroke {
    get {
      float ret = NoesisGUI_PINVOKE.Font_Stroke_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float Size {
    get {
      float ret = NoesisGUI_PINVOKE.Font_Size_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public float Height {
    get {
      float ret = NoesisGUI_PINVOKE.Font_Height_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Font_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

